1 Print all elements in a list
  names.stream().forEach(System.out::println);
2.Convert a list of strings to uppercase
  names.stream().map(name::toUpperCase).forEach(System.out::println)
3. Count the number of elements in a list
   long count = names.stream().count();
   System.out.println(count);
4. Filter names that start with "S"
   names.stream().filter(name->name.startWith("s")).forEach(System.out::println)
5. Get length of each string in a list
   names.stream()
     .map(String::length)
     .forEach(System.out::println);
6. Remove duplicate elements from a list
    List<Integer> unique = nums.stream()
    .distinct()
    .collect(Collectors.toList());
System.out.println(unique);
7. Find duplicate elements in a list
  Set<Integer> seen=new HashSet<>
  Set<Integer> duplicates=names.stream().filter(n->!seen.add(n)).collect(Collectors.toSet());
8. Count how many times each element appears in a list
   Map<Integer, Long> counts = nums.stream()
    .collect(Collectors.groupingBy(
        Function.identity(),
        Collectors.counting()
    ));

System.out.println(counts);
9. Find elements that appear more than once
   List<Integer> duplicates = nums.stream()
    .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))
    .entrySet()
    .stream()
    .filter(e -> e.getValue() > 1)
    .map(Map.Entry::getKey)
    .collect(Collectors.toList());

System.out.println("Elements appearing more than once: " + duplicates);
10. Sort strings alphabetically
   names.stream()
     .sorted()
     .forEach(System.out::println);
11. Sort numbers in descending order
    nums.stream()
    .sorted(Comparator.reverseOrder())
    .forEach(System.out::println);
12. Sort a list of objects by a field (e.g., name or age)
   Sort by age ascending:
   people.stream()
      .sorted(Comparator.comparing(Person::getAge))
      .forEach(p -> System.out.println(p.getName() + " - " + p.getAge()));
   Sort by name descending
   people.stream()
      .sorted(Comparator.comparing(Person::getName).reversed())
      .forEach(p -> System.out.println(p.getName()));
13. Get top 3 highest numbers
   nums.stream()
    .sorted(Comparator.reverseOrder())
    .limit(3)
    .forEach(System.out::println);
14. Get the longest string from a list
   Optional<String> longest = names.stream()
    .reduce((s1, s2) -> s1.length() > s2.length() ? s1 : s2);

longest.ifPresent(System.out::println);
   using max:
  Optional<String> longest = names.stream()
    .max(Comparator.comparing(String::length));

longest.ifPresent(System.out::println);
comprator and comparable 
You have a class like:

class Person {
    String name;
    int age;

    // constructor, getters
}


Now you want to sort people by age or by name, right?

But Java doesn't know how to sort Person objects by default ‚Äî because they‚Äôre custom.

So Java gives you two ways to define sorting logic:

‚úÖ 1. Comparable ‚Äì "I‚Äôll compare myself"

This is used inside the class.
The class itself says: ‚ÄúHere‚Äôs how I should be sorted.‚Äù

üß© Example:
class Person implements Comparable<Person> {
    String name;
    int age;

    // Constructor, getters

    @Override
    public int compareTo(Person other) {
        return Integer.compare(this.age, other.age);  // sort by age
    }
}


Now you can do:

Collections.sort(people);  // Uses compareTo()


üîπ Use Comparable when there's one natural sorting rule.

‚úÖ 2. Comparator ‚Äì "Sort me from outside"

This is used outside the class. You say:

‚ÄúI want to sort Person objects by name or age or salary ‚Äî whatever I want!‚Äù

üß© Example:
people.stream()
      .sorted(Comparator.comparing(Person::getAge))
      .forEach(p -> System.out.println(p.getName() + " - " + p.getAge()));


Here‚Äôs what happens:

Comparator.comparing(Person::getAge) means:
‚Üí compare people by their age

It generates a comparator object behind the scenes

sorted(...) uses that comparator to order the stream

üîÅ Comparator vs Comparable ‚Äì Analogy
Concept	Analogy	Meaning
Comparable	Person says ‚Äúcompare me by age‚Äù	Fixed sorting (inside class)
Comparator	You say ‚Äúcompare these by name‚Äù	Flexible sorting (outside class)

15. Find sum of numbers using reduce
    nums.stream().reduce(0, (a, b) -> a + b);
            or 
    nums.stream().mapToInt(Integer::intValue).sum(); // shortcut
16. Find product of even numbers using reduce
    nums.stream().filter(n -> n % 2 == 0).reduce(1, (a, b) -> a * b);
17. Find the maximum and minimum number using reduce
    int max = nums.stream().reduce(Integer.MIN_VALUE, Integer::max);
int min = nums.stream().reduce(Integer.MAX_VALUE, Integer::min);
18. Count number of even and odd elements
     Map<Boolean, Long> count = nums.stream()
    .collect(Collectors.partitioningBy(n -> n % 2 == 0, Collectors.counting()));

System.out.println("Even: " + count.get(true));
System.out.println("Odd: " + count.get(false));
19. Concatenate all strings in a list
    String result = words.stream().reduce("", (a, b) -> a + b);
System.out.println(result);  // HelloSreejaJava8
  or
  String joined = String.join("", words);  // simpler

20. Group a list of strings by length
    List<String> names = List.of("Sreeja", "Arjun", "Sai", "Mouni");
    Map<Integer, List<String>> byLength = names.stream()
    .collect(Collectors.groupingBy(String::length));
    byLength.forEach((len, list) -> System.out.println(len + " -> " + list));

21. Group names by starting character
    Map<Character, List<String>> byFirstChar = names.stream()
    .collect(Collectors.groupingBy(name -> name.charAt(0)));
    byFirstChar.forEach((ch, list) -> System.out.println(ch + " -> " + list));
22. Count number of names for each starting character
    Map<Character, Long> countByChar = names.stream()
    .collect(Collectors.groupingBy(name -> name.charAt(0), Collectors.counting()));
   countByChar.forEach((ch, count) -> System.out.println(ch + " -> " + count));
23. Group employees by department
    Map<String, List<Employee>> byDept = employees.stream()
    .collect(Collectors.groupingBy(Employee::getDept));
    byDept.forEach((dept, list) -> {
    System.out.println(dept + " -> " + list);});
24. Get average salary by department
    Map<String, Double> avgSalaryByDept = employees.stream()
    .collect(Collectors.groupingBy(
        Employee::getDept,
        Collectors.averagingDouble(Employee::getSalary)
    ));
   avgSalaryByDept.forEach((dept, avg) -> System.out.println(dept + " -> " + avg));
25. Find first element starting with "A" and print it (or "Not found")
    Optional<String> name = names.stream()
    .filter(n -> n.startsWith("A"))
    .findFirst();  // ‚úÖ get the first match
    name.ifPresentOrElse(
    System.out::println,
    () -> System.out.println("Not found"));
26. Convert a string to uppercase only if present
    Optional<String> name = Optional.of("sreeja");
    name.map(String::toUpperCase)
    .ifPresent(System.out::println);  // Prints SREEJA if present
27. Flatten a list of lists
    List<List<Integer>> nums = List.of(
    List.of(1, 2),
    List.of(3, 4),
    List.of(5, 6));
    nums.stream()
    .flatMap(list -> list.stream())  // flatten inner lists
    .forEach(System.out::println);
28. Split a sentence into words, flatten, and count total words
    List<String> sentences = List.of(
    "Java is awesome",
    "Streams are powerful");
    long wordCount = sentences.stream()
    .flatMap(sentence -> Arrays.stream(sentence.split(" ")))  // Stream<String>
    .count();
    System.out.println("Total words: " + wordCount);
29. Convert a list of strings into a list of characters
   List<String> words = List.of("Sreeja", "Java");
   List<Character> chars = words.stream()
    .flatMap(word -> word.chars().mapToObj(c -> (char) c))  // chars() returns IntStream
    .collect(Collectors.toList());
    System.out.println(chars);
30. Convert a list of integers into their squares
    List<Integer> nums = List.of(1, 2, 3, 4, 5);
    List<Integer> squares = nums.stream()
    .map(n -> n * n)
    .collect(Collectors.toList());
    System.out.println(squares);  // [1, 4, 9, 16, 25]
31. find second highest number
    Approach 1: Using distinct, sorted, limit, skip
    List<Integer> nums = List.of(4, 8, 1, 6, 8, 9, 3);
   Optional<Integer> secondHighest = nums.stream()
    .distinct()                           // Remove duplicates
    .sorted(Comparator.reverseOrder())    // Sort descending
    .skip(1)                              // Skip highest
    .findFirst();                         // Take second
   secondHighest.ifPresentOrElse(
    n -> System.out.println("Second highest: " + n),
    () -> System.out.println("Not enough elements"));
    Without sorting (for big data efficiency)
   int max = nums.stream().max(Integer::compare).orElse(Integer.MIN_VALUE);
   Optional<Integer> secondHighest = nums.stream()
    .filter(n -> n < max)
    .max(Integer::compare);
   secondHighest.ifPresent(System.out::println);
32. Reverse sort and skip top 2, print remaining
    List<Integer> result = nums.stream()
    .distinct()
    .sorted(Comparator.reverseOrder()) // Reverse sort
    .skip(2)                            // ‚úÖ Skip top 2
    .collect(Collectors.toList());
   System.out.println(result);
33. Given a Student class (name, age, marks),
   get: all students with marks > 80
   top 3 scorers 
   average marks
   list of names sorted by marks 
   student with the longest name 
   map of student name to marks
  public class Main {
    public static void main(String[] args) {

        List<Student> students = List.of(
            new Student("Sreeja", 21, 91),
            new Student("Arjun", 22, 85),
            new Student("Mounika", 20, 78),
            new Student("Sai", 23, 88),
            new Student("John", 24, 65)
        );

        // 1. All students with marks > 80
        List<Student> highScorers = students.stream()
            .filter(s -> s.getMarks() > 80)
            .collect(Collectors.toList());
        System.out.println("Students with marks > 80: " + highScorers);

        // 2. Top 3 scorers
        List<Student> top3 = students.stream()
            .sorted(Comparator.comparingDouble(Student::getMarks).reversed())
            .limit(3)
            .collect(Collectors.toList());
        System.out.println("Top 3 scorers: " + top3);

        // 3. Average marks
        double average = students.stream()
            .collect(Collectors.averagingDouble(Student::getMarks));
        System.out.println("Average marks: " + average);

        // 4. List of names sorted by marks
        List<String> namesSortedByMarks = students.stream()
            .sorted(Comparator.comparingDouble(Student::getMarks))
            .map(Student::getName)
            .collect(Collectors.toList());
        System.out.println("Names sorted by marks: " + namesSortedByMarks);

        // 5. Student with the longest name
        Optional<Student> longestNameStudent = students.stream()
            .max(Comparator.comparingInt(s -> s.getName().length()));
        longestNameStudent.ifPresent(s ->
            System.out.println("Student with the longest name: " + s.getName())
        );

        // 6. Map of student name to marks
        Map<String, Double> nameToMarks = students.stream()
            .collect(Collectors.toMap(Student::getName, Student::getMarks));
        System.out.println("Name to marks map: " + nameToMarks);
    }}
34 Character of all the String present in a List of Strings and return the result in form of a stream.
    List<Character> firstChars = names.stream()
    .map(name -> name.charAt(0))               // üü¢ map to first char of each name
    .collect(Collectors.toList());
    System.out.println(firstChars);
35. Count occurrence of a given character in a string using Stream API in Java
    String s = "sreeja";
    char target = 's';
   long count = s.chars()  // creates an IntStream of char codes
    .filter(ch -> ch == target) // match the target character
    .count();
    System.out.println("Count of '" + target + "' = " + count);
36. How to Reverse elements of a Parallel Stream in Java?
    names.parallelStream()
    .sorted(Comparator.reverseOrder())
    .forEachOrdered(System.out::println);  // Keeps order during parallel processing
37. find the frequency of each character in string
    Map<Character, Long> freqMap = name.chars() // IntStream of chars
            .mapToObj(c -> (char) c) // Convert int to Character
            .collect(Collectors.groupingBy(
                Function.identity(), // Group by the character itself
                Collectors.counting() // Count occurrences
            ));

        System.out.println(freqMap);  
38. Program to Find the Maximum Number and Minimum Number in a Listint
    int max = nums.stream().reduce(Integer::max).orElse(Integer.MIN_VALUE);
        int min = nums.stream().reduce(Integer::min).orElse(Integer.MAX_VALUE);
39. 















   
